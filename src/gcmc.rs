/*Note: -------  Errors in this file are due to the dependencies on the other files that are not implemented yet. -------*/

pub mod gcm;

use crate::gcm::MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
use crate::gcm::MBEDTLS_ERR_GCM_AUTH_FAILED;
use crate::gcm::MBEDTLS_GCM_DECRYPT;
use crate::gcm::MBEDTLS_GCM_ENCRYPT;
use crate::gcm::MBEDTLS_ERR_GCM_BAD_INPUT;
//use crate::gcm::MBEDTLS_ERR_GCM_HW_ACCEL_FAILED;
//use crate::gcm::MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED;
 
use gcm::mbedtls_gcm_context;

//use std::ptr::copy_nonoverlapping;
use std::ptr::write_bytes;
use std::convert::TryInto;
use std::convert::TryFrom;


pub const MAX_TESTS: usize = 6;

pub fn GET_UINT32_BE(n: &mut u64,b: &mut [u8],i: usize ){
    *n =u64::from( b[i])<<24 |
        u64::from( b[i+1])<<16 |
        u64::from( b[i+2])<<8 |
        u64::from( b[i+3]) ;
}

pub fn PUT_UINT32_BE(n : u32, b :&mut [u8],i: usize){
    b[i]=u8::try_from((n >> 24)&0xFF).unwrap();
    b[i + 1]=u8::try_from((n >> 16)&0xFF).unwrap();
    b[i + 2]=u8::try_from((n >> 8)&0xFF).unwrap();
    b[i + 3]=u8::try_from(n & 0xFF ).unwrap();
}

/*
 * Initialize a context
 */
pub fn mbedtls_gcm_init(ctx: &mut mbedtls_gcm_context)
{
    unsafe
    {
        write_bytes(ctx,0,1);
    }
}

/*
 * Precompute small multiples of H, that is set
 *      HH[i] || HL[i] = H times i,
 * where i is seen as a field element as in [MGV], ie high-order bits
 * correspond to low powers of P. The result is stored in the same way, that
 * is the high-order bit of HH corresponds to P^0 and the low-order bit of HL
 * corresponds to P^127.
 */

 pub fn gcm_gen_table(ctx: &mut mbedtls_gcm_context)->i32
 {
     let mut ret:i32;
     let mut i:usize;
     let mut j:usize;

     let mut hi:u64;
     let mut lo:u64;
     let mut vl:u64;
     let mut vh:u64;

     let mut h: [u8;16];
     let mut olen:usize = 0;

     unsafe
     {
         write_bytes(&mut h, 0, 1);
     }

     GET_UINT32_BE(&mut hi , &mut h, 0);
     GET_UINT32_BE(&mut lo , &mut h, 4);
     vh = u64::from(hi<< 32 ) | lo;

     GET_UINT32_BE(&mut hi ,&mut h, 8);
     GET_UINT32_BE(&mut lo ,&mut h, 12);
     vl = u64::from(hi<< 32 ) | lo;

     /* 8 = 1000 corresponds to 1 in GF(2^128) */
     ctx.HL[8] =vl;
     ctx.HH[8]=vh;

      /* 0 corresponds to 0 in GF(2^128) */
      ctx.HH[0] = 0;
      ctx.HL[0] =0;

      i=4;
      while i!=1 
      {
          let mut T: u32;
          T =u32::try_from((vl & 1) * 0xe1000000).unwrap();
          vl = (vl << 63) | (vl >> 1);
          vh = (vh >> 1) ^ (u64::try_from(T << 32).unwrap());
          
          ctx.HL[i] = vl;
          ctx.HH[i] = vh;
          
          i>>=1;

      }

      i=2;
      while i<=8
      {
          let HiL: [u64;16];
          HiL[i] = ctx.HL[i] ;
          
          let HiH: [u64;16];
          HiH[i] = ctx.HH[i];

          vh = HiH[i];
          vl = HiH[i];

          for j in 1..i
          {
                HiH[j] = vh ^ ctx.HH[j];
                HiL[j] = vl ^ ctx.HL[j];
          }
          i*=2;
      }

      return 0;
 }

 pub fn mbedtls_gcm_setkey(ctx: &mut mbedtls_gcm_context, cipher: mbedtls_cipher_id_t, key: &[u8], keybits:u32) ->i32
 {
     let mut ret: i32 =MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
     let cipher_info: &mut mbedtls_cipher_info_t;
     
     //validate remaining
    //MBEDTLS_MODE_ECB- CIPHER.H
     cipher_info = mbedtls_cipher_info_from_values(cipher,keybits,MBEDTLS_MODE_ECB );
     
    
     //block_size -> cipher.h
     if cipher_info.block_size !=16
     {
         return MBEDTLS_ERR_GCM_BAD_INPUT;
     }

     //cipher.h
     mbedtls_cipher_free(&mut ctx.cipher_ctx);

     if (ret = mbetls_cipher_setup(&mut ctx.cipher_ctx, cipher_info ))!=0
     {
         return ret;
     }

     if (ret = mbedtls_cipher_setkey(&mut ctx.cipher_ctx,key,keybits, MBEDTLS_GCM_ENCRYPT )) != 0
     {
         return ret;
     }

     ret = gcm_gen_table(ctx);
     if  ret !=0{
         return ret;
     }

     return 0;
 }

 /*
 * Shoup's method for multiplication use this table with
 *      last4[x] = x times P^128
 * where x and last4[x] are seen as elements of GF(2^128) as in [MGV]
 */

 pub const last4: [u64;16] = [
     0x0000, 0x1c20, 0x3840, 0x2460,
     0x7080, 0x6ca0, 0x48c0, 0x54e0,
     0xe100, 0xfd20, 0xd940, 0xc560,
     0x9180, 0x8da0, 0xa9c0, 0xb5e0  ];

/*
 * Sets output to x times H using the precomputed tables.
 * x and output are seen as elements of GF(2^128) as in [MGV].
 */

 pub fn gcm_mult(ctx: &mut mbedtls_gcm_context,x: &[u8;16], output:&mut [u8;16])
 {
     let mut i:i32 = 0;
     let mut lo:u8;
     let mut hi:u8;
     let mut rem:u8;

     let mut zh:u64;
     let mut zl:u64;

     if mbedtls_aesni_has_support(MBEDTLS_AESNI_CLMUL)
     {
         let mut h:[u8;16];

         PUT_UINT32_BE((ctx.HH[8] >> 32).try_into().unwrap(), &mut h, 0 );
         PUT_UINT32_BE((ctx.HH[8]).try_into().unwrap(),       &mut h, 4 );
         PUT_UINT32_BE((ctx.HL[8] >> 32).try_into().unwrap(), &mut h, 8 );
         PUT_UINT32_BE((ctx.HL[8]).try_into().unwrap(),       &mut h, 12);

         mbedtls_aesni_gcm_mult(output, x, h);

         return;
     }

     /* MBEDTLS_AESNI_C && MBEDTLS_HAVE_X86_64 */

     lo = x[15] &0xf;

     zh = ctx.HH[lo as usize];
     zl = ctx.HL[lo as usize];

     for i in (0..15).rev()
     {
         lo = x[i] & 0xf;
         hi = (x[i] >> 4 ) & 0xf;

         if i != 15
         {
             rem = u8::try_from(zl & 0xf ).unwrap();
             zl = ( zh << 60 ) | ( zl >> 4 );
             zh =  zh >> 4;
             zh ^= u64:: from( last4[rem as usize] << 48);
             zh ^= ctx.HH[lo as usize];
             zl ^= ctx.HL[lo as usize];
         }

             rem = u8::try_from(zl & 0xf ).unwrap();
             zl = ( zh << 60 ) | ( zl >> 4 );
             zh =  zh >> 4;
             zh ^= u64:: from( last4[rem as usize] << 48);
             zh ^= ctx.HH[hi as usize];
             zl ^= ctx.HL[hi as usize];

       
    }  

         PUT_UINT32_BE( (zh >> 32).try_into().unwrap(),  output, 0);
         PUT_UINT32_BE( (zh).try_into().unwrap(),       output, 4);
         PUT_UINT32_BE( (zl >> 32).try_into().unwrap(), output, 8);
         PUT_UINT32_BE( (zl).try_into().unwrap(),      output, 12);
}


pub fn mbedtls_gcm_starts(mut ctx: &mut mbedtls_gcm_context,
                            mut mode:i32,
                            mut iv: &[u8],
                            mut iv_len:usize,
                            add: &[u8],
                            mut add_len:usize)->i32
{
        let mut ret:i32 = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
        let work_buf: [u8;16];
        let mut i:usize;
        let p: &[u8];
        let mut use_len: usize = 0;
        let mut olen: usize = 0;
        let mut var: usize =0;
        
        //validate baaki h

        /* IV and AD are limited to 2^64 bits, so 2^61 bytes */
    /* IV is not allowed to be zero length */

    if iv_len==0 || (iv_len as u64) >> 61 != 0 || (add_len as u64) >> 61 != 0
    {
        return MBEDTLS_ERR_GCM_BAD_INPUT;
    }

    unsafe
    {
        write_bytes(&mut ctx.y, 0x00, 1);
        write_bytes(&mut ctx.buf, 0x00, 1);
    }

    ctx.mode = mode;
    ctx.len = 0;
    ctx.add_len = 0;

    if iv_len ==12
    {
        (ctx.y).copy_from_slice(&mut iv);      
    }

    else 
    {
        unsafe
        {
            write_bytes(&mut work_buf, 0x00, 16);
        }
        PUT_UINT32_BE((iv_len*8).try_into().unwrap(), &mut work_buf, 12);

        p = iv;
        while iv_len > 0
        {
            if iv_len < 16{
                use_len = iv_len;
            }
            else{
                use_len = 16;
            }
            
            for i in 0..use_len
            {
                ctx.y[i] ^= p[i];
            }

            gcm_mult(ctx,&mut  ctx.y, &mut ctx.y);

            iv_len -= use_len;

            var = var + use_len;
            p = &p[var..];
        }

        for i in 0..16
        {
            ctx.y[i] ^= work_buf[i];    
        }

        gcm_mult(ctx,&mut ctx.y,&mut ctx.y);
    }

    if (ret = mbedtls_cipher_update(&mut ctx.cipher_ctx, ctx.y, 16, ctx.base_ectr,&olen)) != 0
    {
        return ret;
    }

    ctx.add_len = (add_len).try_into().unwrap();
    p = add;
    let mut var1 : usize  = 0;
    while add_len as i32 > 0
    {
        if add_len < 16{
            use_len = add_len;
        }
        else{
            use_len = 16;
        }

        for i in 0..use_len
        {
            ctx.buf[i] ^= p[i];
        }

        gcm_mult( ctx,&mut ctx.buf,&mut ctx.buf );

        add_len -= use_len;
        var1 = var1 + use_len;
        p =&p[var1..];
    }

    return 0;
}

pub fn mbedtls_gcm_update(mut ctx: &mut mbedtls_gcm_context,
                        mut length:u64,
                        mut input: &mut [u8],
                        mut output:&mut [u8]) -> i32
{
    let mut ret: i32 = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    let ectr: [u8;16];
    let mut p:&mut [u8];
    let mut out_p: &mut [u8]= output;
    let mut use_len: usize = 0;
    let mut olen : usize = 0;

    //validate implmentation

    if output > input && usize::try_from(output.as_ptr() as usize - input.as_ptr() as usize).unwrap() < length.try_into().unwrap() 
    {
        return MBEDTLS_ERR_GCM_BAD_INPUT;
    }

    /* Total length is restricted to 2^39 - 256 bits, ie 2^36 - 2^5 bytes
     * Also check for possible overflow */

     if ctx.len + length < ctx.len || u64::from(ctx.len) + length > 0xFFFFFFFE0 
     {
         return MBEDTLS_ERR_GCM_BAD_INPUT;
     }

     ctx.len += length.try_into().unwrap();

     p = input;
     while length > 0
     {
        if length < 16{
            use_len = length.try_into().unwrap();
        }
        else{
            use_len = 16;
        }

        for i in (13..17).rev()
        {
            unsafe{
            let mut k: u8;
             
            ctx.y[i-1] += 1;
            k = ctx.y[i-1]; 
             if k !=0
            {
                  break;
            } 
        }
        }

        if (ret = mbedtls_cipher_update(&ctx.cipher_ctx,ctx.y, 16,ectr, &olen)) !=0
        {
             return ret;
        }

        for i in 0..use_len
        {
             if ctx.mode == MBEDTLS_GCM_DECRYPT.try_into().unwrap()
            {
                 ctx.buf[i] ^= p[i];
            }

            out_p[i] = ectr[i] ^ p[i];
            if ctx.mode == MBEDTLS_GCM_ENCRYPT.try_into().unwrap()
            {
                 ctx.buf[i] ^= out_p[i];
            }
        }

        gcm_mult( ctx,&mut ctx.buf,&mut ctx.buf);
        length -= use_len as u64;
        p = &mut p[use_len..];
        out_p = &mut out_p[use_len..];
     }
     return 0;
}

pub fn mbedtls_gcm_finish( ctx: &mut mbedtls_gcm_context, mut tag:&mut [u8], mut tag_len: usize) -> i32
{
    let mut work_buf: [u8;16];
    let mut i: usize;
    let mut orig_len: u64;
    let mut orig_add_len: u64;

    orig_len = ctx.len * 8;
    orig_add_len = ctx.add_len * 8;

    if tag_len > 16 || tag_len < 4
    {
        return MBEDTLS_ERR_GCM_BAD_INPUT;
    }

    tag.copy_from_slice(&mut ctx.base_ectr);
     
    let mut variable: bool;
    //variable = orig_len || orig_add_len;
    if orig_len > 0 {
        variable = true;
    }
    if orig_add_len > 0{
        variable = true;
    }

    if variable
    {
        unsafe
        {
            write_bytes(&mut work_buf, 0x00, 16);
        }   
        
        PUT_UINT32_BE((orig_add_len >> 32).try_into().unwrap(), &mut work_buf, 0);
        PUT_UINT32_BE((orig_add_len).try_into().unwrap()      , &mut work_buf, 0);
        PUT_UINT32_BE((orig_len >> 32).try_into().unwrap()    , &mut work_buf, 0);
        PUT_UINT32_BE((orig_len).try_into().unwrap()          , &mut work_buf, 0);

        for i in 0..16
        {
            ctx.buf[i] ^= work_buf[i];
        }

        gcm_mult( ctx,&mut ctx.buf,&mut ctx.buf);

        for i in 0..tag_len
        {
            tag[i] ^= ctx.buf[i];
        } 
    }
    return 0;
}

pub fn mbedtls_gcm_crypt_and_tag(ctx: &mut mbedtls_gcm_context,
                            mut mode:i32,
                            mut length: usize,
                            mut iv: &[u8],
                            mut iv_len: usize,
                            mut add: &[u8],
                            mut add_len: usize,
                            mut input : &[u8],
                            output: &mut [u8],
                            mut tag_len: usize,
                            mut tag: &mut [u8] ) -> i32
 {
     let mut ret: i32 = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
     

     ret = mbedtls_gcm_starts(ctx, mode,&mut iv, iv_len,&mut add, add_len);
     if ret != 0
     {
         return ret;
     }


     ret = mbedtls_gcm_update( ctx, length.try_into().unwrap(), &mut input, &mut output );
     if ret !=0 {
         return ret;
     }


     ret = mbedtls_gcm_finish( ctx, &mut tag, tag_len ) ;
     if ret !=0{
         return ret;
     }

     return 0;
 }

 pub fn mbedtls_gcm_auth_decrypt(mut ctx:&mut mbedtls_gcm_context, 
                            mut length: usize,
                            mut iv: & [u8],
                            mut iv_len: usize,
                            mut add: &[u8],
                            mut add_len: usize,
                            mut tag: &[u8],
                            mut tag_len: usize,
                            mut input: &[u8],
                            mut output: &mut [u8])->i32
{
    let mut ret:i32 = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;

    let mut check_tag: Vec<u8> = vec![0;16];
    let mut i: usize;
    let mut diff:i32;


    ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT.try_into().unwrap(), length,&mut  iv, iv_len, &mut add, add_len,&mut input,&mut output, tag_len,&mut check_tag );
    if ret !=0 {
        return ret;
    }

    diff = 0;
    for i in 0..tag_len 
    {
        diff = diff | i32::try_from(tag[i] ^ check_tag[i]).unwrap();
    }

    if diff != 0
    {
        mbedtls_platform_zeroize(output, length);
        return MBEDTLS_ERR_GCM_AUTH_FAILED;
    }

    return 0;
}

pub fn mbedtls_gcm_free( ctx: &mut mbedtls_gcm_context )
{
    mbedtls_cipher_free(&mut ctx.cipher_ctx);
    //mbedtls_platform_zeroize(ctx, sizeof(mbedtls_gcm_context))
}



//Test function available in main.rs

/*
pub const key_index_test_data: [i32;MAX_TESTS] = [0,0,1,1,1,1];

pub const key_test_data: [[u8;32];MAX_TESTS] = [
[   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
],
[
    0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c,
    0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08,
    0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c,
    0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08 
],
[   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
],
[   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
],
[   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
],
[   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
]
];

pub const iv_len_test_data: [usize; MAX_TESTS] = [12,12,12,12,8,60];

pub const iv_index_test_data: [i32; MAX_TESTS] = [0,0,1,1,1,2];

pub const iv_test_data: [[u8;64];MAX_TESTS] = [
    [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ],
    [
        0xca, 0xfe, 0xba, 0xbe, 0xfa, 0xce, 0xdb, 0xad,
        0xde, 0xca, 0xf8, 0x88, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    ],
    [
        0x93, 0x13, 0x22, 0x5d, 0xf8, 0x84, 0x06, 0xe5,
        0x55, 0x90, 0x9c, 0x5a, 0xff, 0x52, 0x69, 0xaa,
        0x6a, 0x7a, 0x95, 0x38, 0x53, 0x4f, 0x7d, 0xa1,
        0xe4, 0xc3, 0x03, 0xd2, 0xa3, 0x18, 0xa7, 0x28,
        0xc3, 0xc0, 0xc9, 0x51, 0x56, 0x80, 0x95, 0x39,
        0xfc, 0xf0, 0xe2, 0x42, 0x9a, 0x6b, 0x52, 0x54,
        0x16, 0xae, 0xdb, 0xf5, 0xa0, 0xde, 0x6a, 0x57,
        0xa6, 0x37, 0xb3, 0x9b, 0x00, 0x00, 0x00, 0x00
    ],
    [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ],
    [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ],
    [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ]
];

pub const add_len_test_data: [usize; MAX_TESTS] = [0,0,0,20,20,20];

pub const add_index_test_data: [i32; MAX_TESTS] = [0,0,0,1,1,1];

pub const additional_test_data: [[u8;64];MAX_TESTS] = [
    [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ],
    [
        0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef,
        0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef,
        0xab, 0xad, 0xda, 0xd2, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ],
    [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ],
    [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ],
    [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ],
    [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ]
];

pub const pt_len_test_data: [usize; MAX_TESTS] = [0,16,64,60,60,60];

pub const pt_index_test_data: [i32; MAX_TESTS] = [0,0,1,1,1,1];

pub const pt_test_data: [[u8; 64];MAX_TESTS] = [
    [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ],
    [
        0xd9, 0x31, 0x32, 0x25, 0xf8, 0x84, 0x06, 0xe5,
        0xa5, 0x59, 0x09, 0xc5, 0xaf, 0xf5, 0x26, 0x9a,
        0x86, 0xa7, 0xa9, 0x53, 0x15, 0x34, 0xf7, 0xda,
        0x2e, 0x4c, 0x30, 0x3d, 0x8a, 0x31, 0x8a, 0x72,
        0x1c, 0x3c, 0x0c, 0x95, 0x95, 0x68, 0x09, 0x53,
        0x2f, 0xcf, 0x0e, 0x24, 0x49, 0xa6, 0xb5, 0x25,
        0xb1, 0x6a, 0xed, 0xf5, 0xaa, 0x0d, 0xe6, 0x57,
        0xba, 0x63, 0x7b, 0x39, 0x1a, 0xaf, 0xd2, 0x55
    ],
    [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ],
    [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ],
    [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ],
    [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ]
];

pub const ct_test_data: [[u8; 64];MAX_TESTS *  3] = [
    [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ],
    [
        0x03, 0x88, 0xda, 0xce, 0x60, 0xb6, 0xa3, 0x92,
        0xf3, 0x28, 0xc2, 0xb9, 0x71, 0xb2, 0xfe, 0x78,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    ],
    [
      0x42, 0x83, 0x1e, 0xc2, 0x21, 0x77, 0x74, 0x24,
      0x4b, 0x72, 0x21, 0xb7, 0x84, 0xd0, 0xd4, 0x9c,
      0xe3, 0xaa, 0x21, 0x2f, 0x2c, 0x02, 0xa4, 0xe0,
      0x35, 0xc1, 0x7e, 0x23, 0x29, 0xac, 0xa1, 0x2e,
      0x21, 0xd5, 0x14, 0xb2, 0x54, 0x66, 0x93, 0x1c,
      0x7d, 0x8f, 0x6a, 0x5a, 0xac, 0x84, 0xaa, 0x05,
      0x1b, 0xa3, 0x0b, 0x39, 0x6a, 0x0a, 0xac, 0x97,
      0x3d, 0x58, 0xe0, 0x91, 0x47, 0x3f, 0x59, 0x85
    ],
    [
      0x42, 0x83, 0x1e, 0xc2, 0x21, 0x77, 0x74, 0x24,
      0x4b, 0x72, 0x21, 0xb7, 0x84, 0xd0, 0xd4, 0x9c,
      0xe3, 0xaa, 0x21, 0x2f, 0x2c, 0x02, 0xa4, 0xe0,
      0x35, 0xc1, 0x7e, 0x23, 0x29, 0xac, 0xa1, 0x2e,
      0x21, 0xd5, 0x14, 0xb2, 0x54, 0x66, 0x93, 0x1c,
      0x7d, 0x8f, 0x6a, 0x5a, 0xac, 0x84, 0xaa, 0x05,
      0x1b, 0xa3, 0x0b, 0x39, 0x6a, 0x0a, 0xac, 0x97,
      0x3d, 0x58, 0xe0, 0x91, 0x00, 0x00, 0x00, 0x00
    ],
    [
      0x61, 0x35, 0x3b, 0x4c, 0x28, 0x06, 0x93, 0x4a,
      0x77, 0x7f, 0xf5, 0x1f, 0xa2, 0x2a, 0x47, 0x55,
      0x69, 0x9b, 0x2a, 0x71, 0x4f, 0xcd, 0xc6, 0xf8,
      0x37, 0x66, 0xe5, 0xf9, 0x7b, 0x6c, 0x74, 0x23,
      0x73, 0x80, 0x69, 0x00, 0xe4, 0x9f, 0x24, 0xb2,
      0x2b, 0x09, 0x75, 0x44, 0xd4, 0x89, 0x6b, 0x42,
      0x49, 0x89, 0xb5, 0xe1, 0xeb, 0xac, 0x0f, 0x07,
      0xc2, 0x3f, 0x45, 0x98, 0x00, 0x00, 0x00, 0x00
    ],
    [
      0x8c, 0xe2, 0x49, 0x98, 0x62, 0x56, 0x15, 0xb6,
      0x03, 0xa0, 0x33, 0xac, 0xa1, 0x3f, 0xb8, 0x94,
      0xbe, 0x91, 0x12, 0xa5, 0xc3, 0xa2, 0x11, 0xa8,
      0xba, 0x26, 0x2a, 0x3c, 0xca, 0x7e, 0x2c, 0xa7,
      0x01, 0xe4, 0xa9, 0xa4, 0xfb, 0xa4, 0x3c, 0x90,
      0xcc, 0xdc, 0xb2, 0x81, 0xd4, 0x8c, 0x7c, 0x6f,
      0xd6, 0x28, 0x75, 0xd2, 0xac, 0xa4, 0x17, 0x03,
      0x4c, 0x34, 0xae, 0xe5, 0x00, 0x00, 0x00, 0x00
    ],
    [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ],
    [
        0x98, 0xe7, 0x24, 0x7c, 0x07, 0xf0, 0xfe, 0x41,
        0x1c, 0x26, 0x7e, 0x43, 0x84, 0xb0, 0xf6, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ],
    [
        0x39, 0x80, 0xca, 0x0b, 0x3c, 0x00, 0xe8, 0x41,
        0xeb, 0x06, 0xfa, 0xc4, 0x87, 0x2a, 0x27, 0x57,
        0x85, 0x9e, 0x1c, 0xea, 0xa6, 0xef, 0xd9, 0x84,
        0x62, 0x85, 0x93, 0xb4, 0x0c, 0xa1, 0xe1, 0x9c,
        0x7d, 0x77, 0x3d, 0x00, 0xc1, 0x44, 0xc5, 0x25,
        0xac, 0x61, 0x9d, 0x18, 0xc8, 0x4a, 0x3f, 0x47,
        0x18, 0xe2, 0x44, 0x8b, 0x2f, 0xe3, 0x24, 0xd9,
        0xcc, 0xda, 0x27, 0x10, 0xac, 0xad, 0xe2, 0x56 
    ],
    [
        0x39, 0x80, 0xca, 0x0b, 0x3c, 0x00, 0xe8, 0x41,
        0xeb, 0x06, 0xfa, 0xc4, 0x87, 0x2a, 0x27, 0x57,
        0x85, 0x9e, 0x1c, 0xea, 0xa6, 0xef, 0xd9, 0x84,
        0x62, 0x85, 0x93, 0xb4, 0x0c, 0xa1, 0xe1, 0x9c,
        0x7d, 0x77, 0x3d, 0x00, 0xc1, 0x44, 0xc5, 0x25,
        0xac, 0x61, 0x9d, 0x18, 0xc8, 0x4a, 0x3f, 0x47,
        0x18, 0xe2, 0x44, 0x8b, 0x2f, 0xe3, 0x24, 0xd9,
        0xcc, 0xda, 0x27, 0x10, 0x00, 0x00, 0x00, 0x00
    ],
    [
        0x0f, 0x10, 0xf5, 0x99, 0xae, 0x14, 0xa1, 0x54,
        0xed, 0x24, 0xb3, 0x6e, 0x25, 0x32, 0x4d, 0xb8,
        0xc5, 0x66, 0x63, 0x2e, 0xf2, 0xbb, 0xb3, 0x4f,
        0x83, 0x47, 0x28, 0x0f, 0xc4, 0x50, 0x70, 0x57,
        0xfd, 0xdc, 0x29, 0xdf, 0x9a, 0x47, 0x1f, 0x75,
        0xc6, 0x65, 0x41, 0xd4, 0xd4, 0xda, 0xd1, 0xc9,
        0xe9, 0x3a, 0x19, 0xa5, 0x8e, 0x8b, 0x47, 0x3f,
        0xa0, 0xf0, 0x62, 0xf7, 0x00, 0x00, 0x00, 0x00
    ],
    [
        0xd2, 0x7e, 0x88, 0x68, 0x1c, 0xe3, 0x24, 0x3c,
        0x48, 0x30, 0x16, 0x5a, 0x8f, 0xdc, 0xf9, 0xff,
        0x1d, 0xe9, 0xa1, 0xd8, 0xe6, 0xb4, 0x47, 0xef,
        0x6e, 0xf7, 0xb7, 0x98, 0x28, 0x66, 0x6e, 0x45,
        0x81, 0xe7, 0x90, 0x12, 0xaf, 0x34, 0xdd, 0xd9,
        0xe2, 0xf0, 0x37, 0x58, 0x9b, 0x29, 0x2d, 0xb3,
        0xe6, 0x7c, 0x03, 0x67, 0x45, 0xfa, 0x22, 0xe7,
        0xe9, 0xb7, 0x37, 0x3b, 0x00, 0x00, 0x00, 0x00
    ],
    [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ],
    [
        0xce, 0xa7, 0x40, 0x3d, 0x4d, 0x60, 0x6b, 0x6e,
        0x07, 0x4e, 0xc5, 0xd3, 0xba, 0xf3, 0x9d, 0x18,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
    ],
    [
        0x52, 0x2d, 0xc1, 0xf0, 0x99, 0x56, 0x7d, 0x07,
        0xf4, 0x7f, 0x37, 0xa3, 0x2a, 0x84, 0x42, 0x7d,
        0x64, 0x3a, 0x8c, 0xdc, 0xbf, 0xe5, 0xc0, 0xc9,
        0x75, 0x98, 0xa2, 0xbd, 0x25, 0x55, 0xd1, 0xaa,
        0x8c, 0xb0, 0x8e, 0x48, 0x59, 0x0d, 0xbb, 0x3d,
        0xa7, 0xb0, 0x8b, 0x10, 0x56, 0x82, 0x88, 0x38,
        0xc5, 0xf6, 0x1e, 0x63, 0x93, 0xba, 0x7a, 0x0a,
        0xbc, 0xc9, 0xf6, 0x62, 0x89, 0x80, 0x15, 0xad  
    ],
    [
        0x52, 0x2d, 0xc1, 0xf0, 0x99, 0x56, 0x7d, 0x07,
        0xf4, 0x7f, 0x37, 0xa3, 0x2a, 0x84, 0x42, 0x7d,
        0x64, 0x3a, 0x8c, 0xdc, 0xbf, 0xe5, 0xc0, 0xc9,
        0x75, 0x98, 0xa2, 0xbd, 0x25, 0x55, 0xd1, 0xaa,
        0x8c, 0xb0, 0x8e, 0x48, 0x59, 0x0d, 0xbb, 0x3d,
        0xa7, 0xb0, 0x8b, 0x10, 0x56, 0x82, 0x88, 0x38,
        0xc5, 0xf6, 0x1e, 0x63, 0x93, 0xba, 0x7a, 0x0a,
        0xbc, 0xc9, 0xf6, 0x62, 0x00, 0x00, 0x00, 0x00
    ],
    [
        0xc3, 0x76, 0x2d, 0xf1, 0xca, 0x78, 0x7d, 0x32,
        0xae, 0x47, 0xc1, 0x3b, 0xf1, 0x98, 0x44, 0xcb,
        0xaf, 0x1a, 0xe1, 0x4d, 0x0b, 0x97, 0x6a, 0xfa,
        0xc5, 0x2f, 0xf7, 0xd7, 0x9b, 0xba, 0x9d, 0xe0,
        0xfe, 0xb5, 0x82, 0xd3, 0x39, 0x34, 0xa4, 0xf0,
        0x95, 0x4c, 0xc2, 0x36, 0x3b, 0xc7, 0x3f, 0x78,
        0x62, 0xac, 0x43, 0x0e, 0x64, 0xab, 0xe4, 0x99,
        0xf4, 0x7c, 0x9b, 0x1f, 0x00, 0x00, 0x00, 0x00
    ],
    [
        0x5a, 0x8d, 0xef, 0x2f, 0x0c, 0x9e, 0x53, 0xf1,
        0xf7, 0x5d, 0x78, 0x53, 0x65, 0x9e, 0x2a, 0x20,
        0xee, 0xb2, 0xb2, 0x2a, 0xaf, 0xde, 0x64, 0x19,
        0xa0, 0x58, 0xab, 0x4f, 0x6f, 0x74, 0x6b, 0xf4,
        0x0f, 0xc0, 0xc3, 0xb7, 0x80, 0xf2, 0x44, 0x45,
        0x2d, 0xa3, 0xeb, 0xf1, 0xc5, 0xd8, 0x2c, 0xde,
        0xa2, 0x41, 0x89, 0x97, 0x20, 0x0e, 0xf8, 0x2e,
        0x44, 0xae, 0x7e, 0x3f, 0x00, 0x00, 0x00, 0x00
    ]
];

pub const tag_test_data: [[u8;16];MAX_TESTS * 3] = [
    [
        0x58, 0xe2, 0xfc, 0xce, 0xfa, 0x7e, 0x30, 0x61,
        0x36, 0x7f, 0x1d, 0x57, 0xa4, 0xe7, 0x45, 0x5a 
    ],
    [
        0xab, 0x6e, 0x47, 0xd4, 0x2c, 0xec, 0x13, 0xbd,
        0xf5, 0x3a, 0x67, 0xb2, 0x12, 0x57, 0xbd, 0xdf 
    ],
    [
        0x4d, 0x5c, 0x2a, 0xf3, 0x27, 0xcd, 0x64, 0xa6,
        0x2c, 0xf3, 0x5a, 0xbd, 0x2b, 0xa6, 0xfa, 0xb4 
    ],
    [
        0x5b, 0xc9, 0x4f, 0xbc, 0x32, 0x21, 0xa5, 0xdb,
        0x94, 0xfa, 0xe9, 0x5a, 0xe7, 0x12, 0x1a, 0x47  
    ],
    [
        0x36, 0x12, 0xd2, 0xe7, 0x9e, 0x3b, 0x07, 0x85,
        0x56, 0x1b, 0xe1, 0x4a, 0xac, 0xa2, 0xfc, 0xcb   
    ],
    [
        0x61, 0x9c, 0xc5, 0xae, 0xff, 0xfe, 0x0b, 0xfa,
        0x46, 0x2a, 0xf4, 0x3c, 0x16, 0x99, 0xd0, 0x50  
    ],
    [
        0xcd, 0x33, 0xb2, 0x8a, 0xc7, 0x73, 0xf7, 0x4b,
        0xa0, 0x0e, 0xd1, 0xf3, 0x12, 0x57, 0x24, 0x35  
    ],
    [
        0x2f, 0xf5, 0x8d, 0x80, 0x03, 0x39, 0x27, 0xab,
        0x8e, 0xf4, 0xd4, 0x58, 0x75, 0x14, 0xf0, 0xfb 
    ],
    [
        0x99, 0x24, 0xa7, 0xc8, 0x58, 0x73, 0x36, 0xbf,
        0xb1, 0x18, 0x02, 0x4d, 0xb8, 0x67, 0x4a, 0x14  
    ],
    [
        0x25, 0x19, 0x49, 0x8e, 0x80, 0xf1, 0x47, 0x8f,
        0x37, 0xba, 0x55, 0xbd, 0x6d, 0x27, 0x61, 0x8c  
    ],
    [
        0x65, 0xdc, 0xc5, 0x7f, 0xcf, 0x62, 0x3a, 0x24,
        0x09, 0x4f, 0xcc, 0xa4, 0x0d, 0x35, 0x33, 0xf8  
    ],
    [
        0xdc, 0xf5, 0x66, 0xff, 0x29, 0x1c, 0x25, 0xbb,
        0xb8, 0x56, 0x8f, 0xc3, 0xd3, 0x76, 0xa6, 0xd9 
    ],
    [
        0x53, 0x0f, 0x8a, 0xfb, 0xc7, 0x45, 0x36, 0xb9,
        0xa9, 0x63, 0xb4, 0xf1, 0xc4, 0xcb, 0x73, 0x8b   
    ],
    [
        0xd0, 0xd1, 0xc8, 0xa7, 0x99, 0x99, 0x6b, 0xf0,
        0x26, 0x5b, 0x98, 0xb5, 0xd4, 0x8a, 0xb9, 0x19  
    ],
    [
        0xb0, 0x94, 0xda, 0xc5, 0xd9, 0x34, 0x71, 0xbd,
        0xec, 0x1a, 0x50, 0x22, 0x70, 0xe3, 0xcc, 0x6c 
    ],
    [
        0x76, 0xfc, 0x6e, 0xce, 0x0f, 0x4e, 0x17, 0x68,
        0xcd, 0xdf, 0x88, 0x53, 0xbb, 0x2d, 0x55, 0x1b 
    ],
    [
        0x3a, 0x33, 0x7d, 0xbf, 0x46, 0xa7, 0x92, 0xc4,
        0x5e, 0x45, 0x49, 0x13, 0xfe, 0x2e, 0xa8, 0xf2  
    ],
    [
        0xa4, 0x4a, 0x82, 0x66, 0xee, 0x1c, 0x8e, 0xb0,
        0xc8, 0xb5, 0xd4, 0xcf, 0x5a, 0xe9, 0xf1, 0x9a
    ]
];



pub fn mbedtls_gcm_self_test()
{
    let ctx: &mut mbedtls_gcm_context;
    let buf:[u8;64];
    let tag_buf: [u8;16];
    let mut ret: i32;
    let mut i: usize;
    let mut j: usize;
    let mut k: usize;
    let mut a: bool;
    let mut b: bool;

    let cipher: &mut mbedtls_cipher_id_t = MBEDTLS_CIPHER_ID_AES;

    for j  in 0..3{

        let mut key_len : i32 = 128 + 64 * j;
        
        for i in 0..MAX_TESTS{

            k = (6* j as usize + i).try_into().unwrap();

            mbedtls_gcm_init(&mut ctx);

            println!(" AES GCM {} {} {:?} ", key_len,i,"enc");
            let mut temp: Vec<u8> = key_test_data[key_index_test_data[i] as usize].to_vec();

            ret = mbedtls_gcm_setkey(&mut ctx, cipher, &mut temp , key_len.try_into().unwrap());

            /*
             * AES-192 is an optional feature that may be unavailable when
             * there is an alternative underlying implementation i.e. when
             * MBEDTLS_AES_ALT is defined.
             */

             if ret==MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED && key_len == 192{
                 println!("Skipped \n");
                 break;
             }
             else if ret !=0{
                println!("Failed \n");
                 mbedtls_gcm_free(&mut ctx);
             }
             
             
             ret = mbedtls_gcm_crypt_and_tag(&mut ctx, MBEDTLS_GCM_ENCRYPT.try_into().unwrap(), pt_len_test_data[i], &iv_test_data[iv_index_test_data[i] as usize], iv_len_test_data[i],&additional_test_data[add_index_test_data[i] as usize],add_len_test_data[i] , &pt_test_data[pt_index_test_data[i]as usize],&mut buf,16,&mut tag_buf);

             if ret !=0{
                println!("Failed \n");
                mbedtls_gcm_free(&mut ctx);
            }

            use std::cmp;
            fn compare(a: &[u8], b: &[u8]) -> cmp::Ordering {
                    a.iter()
                    .zip(b)
                    .map(|(x, y)| x.cmp(y))
                    .find(|&ord| ord != cmp::Ordering::Equal)
                    .unwrap_or(a.len().cmp(&b.len()))
            }

             assert_eq!(cmp::Ordering::Equal, compare(buf.as_ref(), &ct_test_data[k]));
            assert_eq!(cmp::Ordering::Equal, compare(tag_buf.as_ref(), &tag_test_data[k]));
            
            // if  a || b
            // {
            //     ret = 1;
            //     println!("Failed \n");
            //     mbedtls_gcm_free(&mut ctx);
     
            // }


            // let mut dummy_buf: [u8;64];
            // let mut dummy_buf1 : [u8;16];

            // buf.copy_from_slice(&dummy_buf[0..]);
            // tag_buf.copy_from_slice(&dummy_buf1[0..]);

            // for l in 0..64{
            //     if buf[l]!= ct_test_data[k][l] {
            //         // if verbose != 0
            //         { println!( "failed\n" ); }
            //         // ret = 1;
            //         mbedtls_gcm_free( &mut ctx );
            //         // return ret;
            //         return;
            //     }
            // }

            // for l in 0..16{
            //     if tag_buf[l]!= ct_test_data[k][l] {
            //         // if verbose != 0
            //         { println!( "failed\n" ); }
            //         // ret = 1;
            //         mbedtls_gcm_free( &mut ctx );
            //         // return ret;
            //         return;
            //     }
            // }







             mbedtls_gcm_free(&mut ctx);

             println!("Passed \n");


             mbedtls_gcm_init(&mut ctx);

             println!(" AES GCM {} {} {:?} ", key_len,i,"dec");


             ret = mbedtls_gcm_setkey(&mut ctx, cipher, &key_test_data[key_index_test_data[i] as usize], key_len.try_into().unwrap());

             if ret !=0{
                println!("Failed \n");
                mbedtls_gcm_free(&mut ctx);
            }
            

             ret = mbedtls_gcm_crypt_and_tag(&mut ctx, MBEDTLS_GCM_ENCRYPT.try_into().unwrap(), pt_len_test_data[i] , &mut iv_test_data[iv_index_test_data[i] as usize], iv_len_test_data[i], &mut additional_test_data[add_index_test_data[i] as usize], add_len_test_data[i], &mut ct_test_data[k], &mut buf, 16,&mut tag_buf);

             if ret !=0{
                println!("Failed \n");
                mbedtls_gcm_free(&mut ctx);
            }

            assert_eq!(cmp::Ordering::Equal, compare(buf.as_ref(), &pt_test_data[pt_index_test_data[i] as usize]));

            assert_eq!(cmp::Ordering::Equal, compare(tag_buf.as_ref(), &tag_test_data[k]));


             
            // if assert_eq!(cmp::Ordering::Equal, compare(buf.as_ref(), &pt_index_test_data[i]))
            // {
            //     ret=1;
            //     println!("Failed \n");
            //     mbedtls_gcm_free(&mut ctx);
            //     return;
            // }

            // else if assert_eq!(cmp::Ordering::Equal, compare(tag_buf.as_ref(), &tag_test_data[k]))
            // {
            //     ret=1;
            //     println!("Failed \n");
            //     mbedtls_gcm_free(&mut ctx);
            // }


             mbedtls_gcm_free(&mut ctx);
            
             println!("Passed \n");

             mbedtls_gcm_init(&mut ctx);

             println!(" AES GCM {} {} {:?} ", key_len,i,"enc");

             ret = mbedtls_gcm_setkey(ctx, cipher, &key_test_data[key_index_test_data[i] as usize], key_len.try_into().unwrap() );

             if ret !=0{
                println!("Failed \n");
                mbedtls_gcm_free(&mut ctx);
            }

             ret = mbedtls_gcm_starts(&mut ctx, MBEDTLS_GCM_ENCRYPT.try_into().unwrap(), &mut iv_test_data[iv_index_test_data[i] as usize], iv_len_test_data[i], &mut additional_test_data[add_index_test_data[i] as usize], add_len_test_data[i]);

             if ret !=0{
                println!("Failed \n");
                mbedtls_gcm_free(&mut ctx);

            }

             if pt_len_test_data[i] > 32{
                 let mut rest_len: usize = pt_len_test_data[i] -32;
                 ret = mbedtls_gcm_update(&mut ctx,32, &mut pt_test_data[pt_index_test_data[i] as usize], &mut buf);

                 if ret !=0{
                    println!("Failed \n");
                    mbedtls_gcm_free(&mut ctx);
   
                }

                 ret = mbedtls_gcm_update(&mut ctx, rest_len.try_into().unwrap(),&mut pt_test_data[pt_index_test_data[i] as usize][32..],  &mut buf[32..] );

                 if ret !=0{
                    println!("Failed \n");
                    mbedtls_gcm_free(&mut ctx);
                }
             }
             else
             {
                 ret = mbedtls_gcm_update(&mut ctx, pt_len_test_data[i].try_into().unwrap(), &mut ct_test_data[k],&mut buf);

                 if ret !=0{
                    println!("Failed \n");
                    mbedtls_gcm_free(&mut ctx);
                }
             }

             ret = mbedtls_gcm_finish(&mut ctx, &mut tag_buf, 16 );

             if ret !=0{
                println!("Failed \n");
                mbedtls_gcm_free(&mut ctx);
            }

             //memory compare

             mbedtls_gcm_free(&mut ctx );

             println!("Passed. \n");

        }
    }

    ret = 0;

    return;

}

*/
